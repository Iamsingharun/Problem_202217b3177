#include <stdio.h>
#include <stdlib.h>
#define MAX 20
/* Define the required functions to create a list, insert into the list, delete an element from the list, search and display the list */
void create();
void insert();
void deletion();
void search();
void display();
int a, b[MAX], n, p, e, f, i, pos;
void main() {
   int ch;
   char g = 'y';
   do {
       printf("\n Main Menu");
       printf("\n 1.Create \n 2.Delete \n 3.Search \n 4.Insert \n 5.Display \n 6.Exit \n");
       printf("\n Enter your Choice: ");
       scanf("%d", &ch);
       /* The following switch will call the appropriate choice provided by the user */
       switch (ch) {
           case 1:
               create();
               break;
           case 2:
               deletion();
               break;
           case 3:
               search();
               break;
           case 4:
               insert();
               break;
           case 5:
               display();
               break;
           case 6:
               exit(0);
               break;
           default:
               printf("\n Enter the correct choice:");
               break;
       }
       printf("\n Do you want to continue (y/n)?: ");
       scanf(" %c", &g);  // Added a space before %c to consume any trailing whitespace characters
   } while (g == 'y' || g == 'Y');
}
void create() {
   printf("\n Enter the number of nodes: ");
   scanf("%d", &n);
   /* The loop should run till we get the ‘n’ inputs */
   for (i = 0; i < n; i++) {
       printf("\n Enter the Element %d: ", i + 1);
       scanf("%d", &b[i]);
   }
}
void search() {
   int found = 0; // Flag to check if the element is found
   printf("\n Enter the Element to be searched: ");
   scanf("%d", &e);
   for (i = 0; i < n; i++) {
       if (b[i] == e) {
           printf("Value %d is at the %d position.\n", e, i);
           found = 1;
           break;
       }
   }
   if (!found) {
       printf("Value %d is not in the list.\n", e);
   }
}
void insert() {
   printf("\n Enter the position you need to insert at: ");
   scanf("%d", &pos);
   if (pos > n || pos < 0 || n >= MAX) { // Added boundary checks for position and maximum size
       printf("\n Invalid Location.\n");
   } else {
       for (i = n; i > pos; i--) {
           b[i] = b[i - 1];
       }
       printf("\n Enter the element to insert: ");
       scanf("%d", &p);
       b[pos] = p;
       n++;
   }
   printf("\n The list after insertion: \n");
   display();
}
void deletion() {
   printf("\n Enter the position you want to delete: ");
   scanf("%d", &pos);
   if (pos >= n || pos < 0) {
       printf("\n Invalid Location.\n");
   } else {
       for (i = pos; i < n - 1; i++) {
           b[i] = b[i + 1];
       }
       n--;
   }
   printf("\n The Elements after deletion: \n");
   display();
}
void display() {
   printf("\n The Elements of The list ADT are: \n");
   for (i = 0; i < n; i++) {
       printf("%d ", b[i]);
   }
   printf("\n");
}
